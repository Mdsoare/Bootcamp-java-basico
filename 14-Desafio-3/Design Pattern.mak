<h1 align="center">Design Pattern</h1>

<h2> üõë O que √© Design Pattern? </h2>

<p>Design Pattern (padr√£o de projeto) √© uma solu√ß√£o reutiliz√°vel para um problema comum de design de software. 
O objetivo dos padr√µes de projeto √© fornecer uma solu√ß√£o testada e comprovada para um problema espec√≠fico de design de software que ocorre repetidamente na pr√°tica.</p>

<p>Os padr√µes de projeto s√£o baseados em princ√≠pios de design de software que visam tornar o software mais eficiente, escal√°vel, flex√≠vel e f√°cil de manter. 
Existem muitos padr√µes de projeto diferentes que foram criados ao longo dos anos, cada um abordando um problema espec√≠fico de design de software. </p>
Alguns exemplos comuns incluem Singleton, Factory Method, Strategy, Observer, Adapter e Decorator.

<p>O padr√£o Singleton √© um dos padr√µes de projeto mais simples e populares que √© usado para garantir que uma classe tenha apenas uma inst√¢ncia e fornece um 
ponto de acesso global a essa inst√¢ncia. Isso √© √∫til em situa√ß√µes em que √© importante ter uma √∫nica inst√¢ncia de uma classe, como para gerenciar recursos 
compartilhados ou para fornecer acesso a um objeto compartilhado em todo o programa.</p>

<p>Os padr√µes de projeto s√£o amplamente usados em desenvolvimento de software para fornecer solu√ß√µes padronizadas para problemas de design comuns e para 
melhorar a qualidade do software. Eles s√£o amplamente utilizados em projetos de grande escala e em equipes de desenvolvimento em que a padroniza√ß√£o e a 
reutiliza√ß√£o de c√≥digo s√£o importantes.</p>

<h2> üõë Exemplos de implementa√ß√£o com padr√£o Design Pattern </h2>

<h3>Singleton abordagem "Lazy" (pregui√ßosa)</h3>

<p>
O objetivo do padr√£o Singleton √© garantir que apenas uma √∫nica inst√¢ncia de uma classe seja criada e usada durante toda a execu√ß√£o do programa.
Essa implementa√ß√£o do padr√£o Singleton √© "pregui√ßosa" porque a inst√¢ncia da classe n√£o √© criada at√© que o m√©todo "getNomeDaInstancia()" seja chamado pela primeira vez.
Essa abordagem √© √∫til quando a cria√ß√£o da inst√¢ncia √© custosa em termos de recursos ou tempo de processamento, pois evita a cria√ß√£o desnecess√°ria da 
inst√¢ncia at√© que ela seja realmente necess√°ria.
</p>
<p>
No entanto, essa implementa√ß√£o do padr√£o Singleton usando a abordagem "Lazy" √© suscet√≠vel a problemas de concorr√™ncia em ambientes multi-threaded, 
em que v√°rias threads podem tentar acessar e modificar a inst√¢ncia da classe simultaneamente. Isso pode resultar na cria√ß√£o de m√∫ltiplas inst√¢ncias da classe, 
o que viola a premissa do padr√£o Singleton.
</p>
<p>
Para evitar esse problema, pode ser necess√°rio adicionar sincroniza√ß√£o ao m√©todo "getNomeDaInstancia()" para garantir que apenas uma √∫nica thread possa acessar
e modificar a inst√¢ncia da classe por vez. No entanto, isso pode ter um impacto negativo no desempenho do programa, especialmente se a cria√ß√£o da inst√¢ncia for 
custosa em termos de recursos ou tempo de processamento.
</p>
<p>
Outra alternativa √© usar a abordagem "Eager" que ser√° abordada em seguida, em que a inst√¢ncia da classe √© criada imediatamente na inicializa√ß√£o da classe, 
em vez de ser criada apenas quando necess√°rio. Isso garante que a inst√¢ncia seja criada apenas uma vez e torna a implementa√ß√£o mais segura em ambientes multi-threaded, 
mas pode aumentar o tempo de inicializa√ß√£o do programa e consumir mais recursos.
</p>

<h3>Singleton Eager (ansiosa)</h3>

<p>
A abordagem "Eager", em que a inst√¢ncia da classe √© criada imediatamente na inicializa√ß√£o da classe, em vez de ser criada apenas quando necess√°rio, como no caso da abordagem "Lazy". 
</p>
<p>
Essa abordagem "ansiosa" √© mais segura em ambientes multi-threaded, pois a inst√¢ncia √© garantida para ser criada apenas uma vez e √© acess√≠vel de forma segura por todas as threads 
que acessam a classe.
</p>
<p>
No entanto, a abordagem "Eager" pode n√£o ser apropriada se a cria√ß√£o da inst√¢ncia for custosa em termos de recursos ou tempo de processamento, 
pois pode aumentar o tempo de inicializa√ß√£o do programa e consumir mais recursos desnecessariamente. Nesses casos, a abordagem "Lazy" pode ser mais adequada.
</p>

<h3>Singleton LazyHolder </h3>

<p>
Singleton LazyHolder √© uma abordagem de implementa√ß√£o do padr√£o Singleton que aproveita a inicializa√ß√£o tardia e a inicializa√ß√£o segura por meio de classes aninhadas 
est√°ticas em Java. O objetivo √© garantir que a inst√¢ncia do Singleton seja criada apenas quando necess√°rio, mas sem o risco de problemas de concorr√™ncia em 
ambientes multi-threaded.
</p>
<p>
Essa abordagem tamb√©m √© conhecida como "initialization on demand holder idiom" em ingl√™s, e √© considerada uma das maneiras mais seguras e eficientes de implementar 
o padr√£o Singleton em Java.
</p>

<h3>Factory Method </h3>

<p>
O padr√£o Factory Method √© um padr√£o criacional que fornece uma interface para criar objetos em uma superclasse, mas permite que as subclasses alterem o tipo de 
objetos que ser√£o criados. O Factory Method √© √∫til quando um objeto precisa ser criado em tempo de execu√ß√£o e n√£o se sabe de antem√£o qual objeto precisa ser criado.
</p>


<h3>Strategy </h3>

<p>
O padr√£o Strategy √© um padr√£o comportamental que permite definir uma fam√≠lia de algoritmos, encapsul√°-los e torn√°-los intercambi√°veis. 
O Strategy permite que o algoritmo varie independentemente dos clientes que o utilizam.
</p>

<h3>Observer </h3>

<p>
O padr√£o Observer √© um padr√£o comportamental que define uma depend√™ncia um-para-muitos entre objetos, de forma que quando um objeto muda de estado, 
todos os seus dependentes s√£o notificados e atualizados automaticamente. Esta abordagem √© √∫til quando se deseja manter v√°rios objetos sincronizados 
com um objeto principal que muda de estado.
</p>
<p>
Este padr√£o promove o desacoplamento entre os objetos e √© amplamente utilizado em interfaces gr√°ficas de usu√°rio e sistemas distribu√≠dos.
</p>

<h3>Adapter </h3>

<p>
O padr√£o Adapter √© um padr√£o estrutural que permite que duas classes com interfaces incompat√≠veis trabalhem juntas, atuando como uma ponte entre elas, 
permitindo que trabalhem juntas mesmo que tenham interfaces diferentes. Este padr√£o converte a interface de uma classe em outra interface que o cliente espera encontrar. 
</p>
<p>
O padr√£o Adapter √© amplamente utilizado em sistemas legados que precisam ser integrados com novos sistemas.
</p>

<h3>Decorator </h3>

<p>
O padr√£o Decorator √© um padr√£o estrutural que permite adicionar funcionalidades a um objeto dinamicamente, sem alterar a sua estrutura. 
√â usado para adicionar funcionalidade a um objeto em tempo de execu√ß√£o, sem afetar outros objetos da mesma classe. 
Ele permite que as funcionalidades sejam adicionadas e removidas de forma din√¢mica. 
</p>
<p>
O padr√£o Decorator √© amplamente utilizado em interfaces gr√°ficas de usu√°rio e sistemas de gerenciamento de documentos.
Isso √© √∫til quando se deseja adicionar comportamentos a um objeto de forma din√¢mica, sem precisar alterar a sua classe ou criar subclasses adicionais.
</p>


<h2> üìö Sugest√µes de Estudos</h2>
<ul>
	<p>Existem diversos materiais sobre Design Patterns. Algumas sugest√µes s√£o:</p>
	<ol>
		<li>Livro: "Padr√µes de Projeto: Solu√ß√µes Reutiliz√°veis de Software Orientado a Objetos", de Erich Gamma, Richard Helm, Ralph Johnson e John Vlissides.</li>
		<li>Curso online: "Design Patterns em Java", da plataforma Alura. Este curso √© voltado para programadores que j√° possuem conhecimento em Java e aborda diversos padr√µes de projeto. </li>
		<li>Artigos online: Algumas sugest√µes s√£o o Blog da Caelum, a DevMedia e a Code Heroes. </li>
		<li>V√≠deos: no YouTube, algumas sugest√µes s√£o os canais do Programa√ß√£o Din√¢mica e do DevDojo. </li>
	</ol>
</ul>


<h3 align="center">‚ú® Ô∏èRedes Socias</h3>
<p align="center"> 
<a href="https://www.linkedin.com/in/marcelodsoares/">LinkedIn</a> ‚ñ™Ô∏è
<a href="https://github.com/Mdsoare/">GitHub</a>
</p>

<p align="center">Disponibilizado por Marcelo Soares</p>